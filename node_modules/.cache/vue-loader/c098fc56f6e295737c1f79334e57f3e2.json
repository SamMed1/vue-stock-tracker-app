{"remainingRequest":"/Users/SamuelMedhurst/Desktop/vue-project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/SamuelMedhurst/Desktop/vue-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/SamuelMedhurst/Desktop/vue-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/SamuelMedhurst/Desktop/vue-project/src/components/UserCard.vue?vue&type=template&id=0ce62faa&scoped=true&","dependencies":[{"path":"/Users/SamuelMedhurst/Desktop/vue-project/src/components/UserCard.vue","mtime":1601416670932},{"path":"/Users/SamuelMedhurst/Desktop/vue-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/SamuelMedhurst/Desktop/vue-project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/SamuelMedhurst/Desktop/vue-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/SamuelMedhurst/Desktop/vue-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}